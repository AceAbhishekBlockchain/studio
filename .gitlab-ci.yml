
# Use a Node.js image compatible with your Next.js project and GitLab Runner environment
image: node:20

# Define the stages of your CI/CD pipeline
stages:
  - build # For compiling the application
  - test  # For running linters, type checks, and other tests
  - deploy # For deploying the application

# Cache dependencies to speed up subsequent pipeline runs
cache:
  key: ${CI_COMMIT_REF_SLUG} # Cache per branch to avoid conflicts
  paths:
    - node_modules/ # Cache installed Node modules
    - .next/cache/  # Cache Next.js build cache

# Commands to run before each job in the pipeline
before_script:
  - echo "Installing project dependencies..."
  - npm install --legacy-peer-deps # Install dependencies, --legacy-peer-deps can help with complex dependency trees

# Job to build the Next.js application
build_app:
  stage: build
  script:
    - echo "Building the Next.js application..."
    - npm run build
    - echo "Build complete."
  artifacts:
    paths:
      # List of files and directories to keep as artifacts for subsequent stages (e.g., deployment)
      - .next/
      - public/
      - next.config.ts # or .js if you use JavaScript
      - package.json
      - package-lock.json # or yarn.lock
      - apphosting.yaml # Important for Firebase App Hosting deployment
      - tsconfig.json
    expire_in: 1 week # How long to keep the artifacts
  rules:
    # Run this job for all branches and tags, except when a variable $SKIP_BUILD is true
    - if: '$SKIP_BUILD == "true"'
      when: never
    - when: on_success

# Job to run tests (linting, type checking, etc.)
test_app:
  stage: test
  script:
    - echo "Running linters and type checks..."
    - npm run lint
    - npm run typecheck
    # If you add a dedicated test script (e.g., "npm run test" for Jest/Vitest), add it here:
    # - npm run test
    - echo "Tests and checks complete."
  dependencies: [] # This job does not depend on artifacts from the build_app job
  rules:
    # Run this job for all branches and tags, except when a variable $SKIP_TESTS is true
    - if: '$SKIP_TESTS == "true"'
      when: never
    - when: on_success

# --- Deployment to Firebase App Hosting ---
# This deployment stage is now configured.
# To use it:
# 1. Ensure Firebase authentication is configured by setting the following
#    CI/CD variables in your GitLab project (Settings > CI/CD > Variables):
#    - FIREBASE_TOKEN (generate with `firebase login:ci`)
#    - FIREBASE_PROJECT_ID
#    - APP_HOSTING_BACKEND_ID
# 2. This job is set to 'manual'. After a pipeline for the default branch succeeds,
#    you can manually trigger this deployment from the GitLab CI/CD > Pipelines page.
#    Change 'when: manual' to 'when: on_success' for automatic deployment on merge to default branch.

deploy_to_firebase_app_hosting:
  stage: deploy
  image: firebase/firebase-tools:latest # Use the official Firebase image for deployment tools
  script:
    - echo "Starting deployment to Firebase App Hosting..."
    - echo "Verifying Firebase CLI access (requires FIREBASE_TOKEN variable)..."
    - firebase --version
    - echo "Optional: Verifying Firebase project access (requires FIREBASE_PROJECT_ID variable)..."
    - firebase projects:list --token ${FIREBASE_TOKEN} # Verify authentication and list accessible projects
    - echo "Preparing deployment artifacts..."
    # The source for deployment is the root directory containing build artifacts from the 'build_app' job.
    - echo "Deploying backend ID: ${APP_HOSTING_BACKEND_ID} to project: ${FIREBASE_PROJECT_ID}..."
    # The following command assumes your apphosting.yaml is configured correctly
    # and you are deploying the backend defined there.
    - firebase apphosting:backends:deploy ${APP_HOSTING_BACKEND_ID} --project ${FIREBASE_PROJECT_ID} --token ${FIREBASE_TOKEN} --source .
    - echo "Deployment to Firebase App Hosting finished."
  dependencies:
    - build_app # This job depends on the artifacts from the build_app job
  rules:
    # Deploy only when changes are pushed/merged to the default branch (e.g., main or master)
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual # Change to 'on_success' for automatic deployment on merge to default branch
    # Prevent deployment on other branches/tags unless explicitly defined
    - when: never
